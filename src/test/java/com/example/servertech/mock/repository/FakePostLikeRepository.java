package com.example.servertech.mock.repository;

import com.example.servertech.domain.post.entity.PostLike;
import com.example.servertech.domain.post.repository.PostLikeRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostLikeRepository implements PostLikeRepository {
	private final List<PostLike> data = Collections.synchronizedList(new ArrayList<>());
	private final AtomicLong autoGeneratedId = new AtomicLong(1);

	@Override
	public PostLike save(PostLike postLike) {
		PostLike build = PostLike.builder()
			.id(autoGeneratedId.getAndIncrement())
			.post(postLike.getPost())
			.liker(postLike.getLiker())
			.build();
		data.add(build);
		return build;
	}

	@Override
	public void deleteByPostAndUser(Long postId, Long userId) {
		data.removeIf(postLike ->
			postLike.getPost().getId().equals(postId) &&
				postLike.getLiker().getId().equals(userId)
		);
	}

	@Override
	public Optional<PostLike> findByPostAndUser(Long postId, Long userId) {
		return data.stream()
			.filter(postLike ->
				postLike.getPost().getId().equals(postId) &&
					postLike.getLiker().getId().equals(userId)
			)
			.findFirst();
	}

	@Override
	public Integer countByPostId(Long postId) {
		return Math.toIntExact(
			data.stream()
				.filter((postLike -> postLike.getPost().getId().equals(postId)))
				.count()
		);
	}
}
