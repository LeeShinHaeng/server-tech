package com.example.servertech.mock.repository;

import com.example.servertech.domain.notification.entity.Notification;
import com.example.servertech.domain.notification.repository.NotificationRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeNotificationRepository implements NotificationRepository {
	private final List<Notification> data = Collections.synchronizedList(new ArrayList<>());
	private final AtomicLong autoGeneratedId = new AtomicLong(1);

	@Override
	public Notification save(Notification notification) {
		Notification build = Notification.builder()
			.id(autoGeneratedId.getAndIncrement())
			.title(notification.getTitle())
			.content(notification.getContent())
			.type(notification.getType())
			.receiver(notification.getReceiver())
			.isRead(notification.getIsRead())
			.createTime(notification.getCreateTime())
			.build();
		data.add(build);
		return build;
	}

	@Override
	public Optional<Notification> findById(Long id) {
		return data.stream()
			.filter(notification ->
				notification.getId().equals(id))
			.findFirst();
	}

	@Override
	public List<Notification> findByReceiverId(Long receiverId) {
		return data.stream()
			.filter(notification ->
				notification.getReceiver().getId().equals(receiverId))
			.toList();
	}
}
