package com.example.servertech.mock.repository;

import com.example.servertech.domain.comment.entity.CommentLike;
import com.example.servertech.domain.comment.repository.CommentLikeRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

public class FakeCommentLikeRepository implements CommentLikeRepository {
	private final List<CommentLike> data = Collections.synchronizedList(new ArrayList<>());
	private final AtomicLong autoGeneratedId = new AtomicLong(1);

	@Override
	public CommentLike save(CommentLike commentLike) {
		CommentLike build = CommentLike.builder()
			.id(autoGeneratedId.getAndIncrement())
			.comment(commentLike.getComment())
			.liker(commentLike.getLiker())
			.build();
		data.add(build);
		return build;
	}

	@Override
	public void deleteByCommentAndUser(Long commentId, Long userId) {
		data.removeIf(commentLike ->
			commentLike.getComment().getId().equals(commentId) &&
				commentLike.getLiker().getId().equals(userId)
		);
	}

	@Override
	public List<CommentLike> findAllByCommentIdInAndLikerId(List<Long> commentIds, Long likerId) {
		return data.stream()
			.filter(commentLike ->
				commentLike.getLiker().getId().equals(likerId) &&
					commentIds.contains(commentLike.getComment().getId())
			).toList();
	}
}
