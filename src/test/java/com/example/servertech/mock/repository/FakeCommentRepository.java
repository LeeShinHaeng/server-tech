package com.example.servertech.mock.repository;

import com.example.servertech.domain.comment.entity.Comment;
import com.example.servertech.domain.comment.repository.CommentRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeCommentRepository implements CommentRepository {
	private final List<Comment> data = Collections.synchronizedList(new ArrayList<>());
	private final AtomicLong autoGeneratedId = new AtomicLong(1);

	@Override
	public Comment save(Comment comment) {
		Comment build = Comment.builder()
			.id(autoGeneratedId.getAndIncrement())
			.post(comment.getPost())
			.writer(comment.getWriter())
			.content(comment.getContent())
			.build();
		data.add(build);
		return build;
	}

	@Override
	public Optional<Comment> findById(Long id) {
		return data.stream()
			.filter(comment -> comment.getId().equals(id))
			.findFirst();
	}

	@Override
	public List<Comment> findByPostId(Long postId) {
		return data.stream()
			.filter(comment -> comment.getPost().getId().equals(postId))
			.collect(Collectors.toList());
	}
}
